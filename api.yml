swagger: "2.0"
info:
  description: "揪團"
  version: "1.0.0"
  title: "o2gather"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "o2gather.ptass.org"
basePath: "/api/v1"
tags:
- name: "user"
  description: "Just User setting"
- name: "event"
  description: "團購"
schemes:
- "https"
- "http"
paths:
  /events:
    get:
      tags:
      - "event"
      summary: "Get all events"
      description: "Get all events"
      operationId: "getAllEvents"
      produces:
      - "application/json"
      parameters:
      - name: "category"
        in: "query"
        description: "values that need to be considered for filter"
        required: false
        type: "string"
      - name: "search"
        in: "query"
        description: "values that need to be considered for filter"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
    post:
      tags:
      - "event"
      summary: "Get all events"
      description: "Get all events"
      operationId: "createAllEvents"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            category:
              type: string
            start_time:
              type: string
              format: date-time
            end_time:
              type: string
              format: date-time
            min_people:
              type: integer
              format: int32
            max_people:
              type: integer
              format: int32
            invited:
              type: array
              description: "user email list"
              items:
                type: string
          required:
            - name
            - description
            - category
            - start_time
            - end_time
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
  /events/{event_id}:
    get:
      tags:
      - "event"
      summary: "Get event by id"
      description: "Get event by id"
      operationId: "getEventById"
      produces:
      - "application/json"
      parameters:
      - name: "event_id"
        in: "path"
        description: "event id"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Event"
        "400":
          description: "Invalid event id supplied"
        "404":
          description: "Event not found"
    patch:
      tags:
      - "event"
      summary: "Update event by id"
      description: "Update event by id"
      operationId: "updateEventById"
      produces:
      - "application/json"
      parameters:
      - name: "event_id"
        in: "path"
        description: "event id"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            category:
              type: string
            start_time:
              type: string
              format: date-time
            end_time:
              type: string
              format: date-time
            min_people:
              type: integer
              format: int32
            max_people:
              type: integer
              format: int32
            status:
              type: string
              description: "open, close, cancel"
          required:
            - name
            - description
            - category
            - start_time
            - end_time
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Event"
        "400":
          description: "Invalid event id supplied"
        "404":
          description: "Event not found" 
    delete:
      tags:
      - "event"
      summary: "Delete event by id"
      description: "Delete event by id"
      operationId: "deleteEventById"
      produces:
      - "application/json"
      parameters:
      - name: "event_id"
        in: "path"
        description: "event id"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Event"
        "400":
          description: "Invalid event id supplied"
        "404":
          description: "Event not found"
  /events/{event_id}/join:
    post:
      tags:
      - "event"
      summary: "Join event by id"
      description: "Join event by id"
      operationId: "joinEventById"
      produces:
      - "application/json"
      parameters:
      - name: "event_id"
        in: "path"
        description: "event id"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Event"
        "400":
          description: "Invalid event id supplied"
        "404":
          description: "Event not found"
  /events/{event_id}/leave:
    post:
      tags:
      - "event"
      summary: "Leave event by id"
      description: "Leave event by id"
      operationId: "leaveEventById"
      produces:
      - "application/json"
      parameters:
      - name: "event_id"
        in: "path"
        description: "event id"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Event"
        "400":
          description: "Invalid event id supplied"
        "404":
          description: "Event not found"
  /events/{event_id}/msgs:
    get:
      tags:
      - "event"
      summary: "Get all messages of event by id"
      description: "Get all messages of event by id"
      operationId: "getAllMsgsOfEventById"
      produces:
      - "application/json"
      parameters:
      - name: "event_id"
        in: "path"
        description: "event id"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Message"
        "400":
          description: "Invalid event id supplied"
        "404":
          description: "Event not found"
    post:
      tags:
      - "event"
      summary: "Send message to event by id"
      description: "Send message to event by id"
      operationId: "sendMsgToEventById"
      produces:
      - "application/json"
      parameters:
      - name: "event_id"
        in: "path"
        description: "event id"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          type: object
          properties:
            msg:
              type: string
          required:
            - msg
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Event"
        "400":
          description: "Invalid event id supplied"
        "404":
          description: "Event not found"
  /categories:
    get:
      tags:
      - "event"
      summary: "Get all categories"
      description: "Get all categories"
      operationId: "getAllCategories"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Category"
  /users/{user_id}/events:
    get:
      tags:
      - "event"
      summary: "Get all events by user id"
      description: "Get all events by user id"
      operationId: "getAllEventsByUserId"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "user id"
        required: true
        type: "string"
      - name: "status"
        in: "query"
        description: "values that need to be considered for filter"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        "400":
          description: "Invalid user id supplied"
        "404":
          description: "User not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Event:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"